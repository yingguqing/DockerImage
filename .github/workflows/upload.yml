# 打包镜像，上传到指定URL(脚本使用：miniserve上传服务)
name: 上传镜像

on:
  workflow_dispatch:
    inputs:
      platform:
        type: choice
        description: "选择镜像架构"
        options: 
          - amd64
          - arm64
        default: arm64
      docker_images:
        description: '请填写docker镜像名称 多个用英文逗号分开'
        required: true
        default: 'snowdreamtech/frps:latest'  # 设置默认的 Docker 镜像列表

env: 
  # 上传token
  Authorization: "${{ secrets.Authorization }}"
  # 上传链接
  UPLOADURL: "${{ secrets.UPLOADURL }}"

jobs:
  pull_and_package:
    runs-on: ubuntu-latest
    steps:
    - name: Before freeing up disk space
      run: |
        echo "Before freeing up disk space"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    # 增加可用磁盘空间
    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 2048
        swap-size-mb: 128
        remove-dotnet: 'true'
        remove-haskell: 'true'
        # 如果空间还是不够用，可以把以下开启，清理出更多空间
        remove-android: 'true'
        remove-codeql: 'true'
        build-mount-path: '/var/lib/docker/'

    - name: Restart docker
      run: sudo service docker restart

    - name: Free up disk space complete
      run: |
        echo "Free up disk space complete"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: Install pv
      run: sudo apt-get install -y pv

    - name: Checkout repository
      uses: actions/checkout@v4

    # 开启ipv4和ipv6，解决只有ipv6的情况下，上传失败
    #- name: Setup WARP
    #  uses: fscarmen/warp-on-actions@v1.1
    #  with:
    #    stack: dual

    - name: Pull Docker Images and Package
      run: |
        platform="${{ github.event.inputs.platform }}"
        images="${{ github.event.inputs.docker_images }}"
        IFS=',' read -r -a image_array <<< "$images"
        for image in "${image_array[@]}"; do
          docker pull "${image}" --platform "linux/${platform}"
          # 提取包含可能的标签或sha256的部分
          image_with_tag_or_sha=${image##*/}
          # 提取去掉标签或sha256的镜像名
          image_name=${image_with_tag_or_sha%%[:@]*}
          docker save "${image}" -o "${image_name}-image.tar"
          
          echo "开始清理磁盘空间"
          echo "=============================================================================="
          df -hT
          echo "=============================================================================="
          # 清理镜像
          docker rmi $image
          echo "磁盘空间清理完毕"
          echo "=============================================================================="
          df -hT
          echo "==============================================================================" 
        done

    - name: Compress the TAR files
      run: |
        tar -czf images.tar.gz *-image.tar

    - name: Upload file
      run: |
        pv -p | curl --progress-bar -X POST -H "Authorization: ${Authorization}" "$UPLOADURL" -F "path=@images.tar.gz"

    - name: Clean up intermediate files
      run: |
        rm *-image.tar
